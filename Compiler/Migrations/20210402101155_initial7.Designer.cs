// <auto-generated />
using System;
using Compiler.Domain.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Compiler.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210402101155_initial7")]
    partial class initial7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Compiler.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Logs.Attempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<int>("KataId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KataId");

                    b.HasIndex("UserId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Logs.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KataId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KataId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Tasks.Kata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Input")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Katas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = @"Вам нужно написать функцию для умножения двух чисел.
Например, входные данные: 2, 6Результат: 12",
                            InitialCode = @"using System;
                                public class Test
                                {
                                    static public void Main()
                                    {
                                        //ввод чисел
                                        int a = Convert.ToInt32(Console.ReadLine());
                                        int b = Convert.ToInt32(Console.ReadLine());
                                        //код

                                        Console.WriteLine();  //результат
                                    }
                                }",
                            Input = "2, 6;4, 5;4, 7;100, 10",
                            LanguageId = 1,
                            Name = "Умножение чисел",
                            Output = "12; 20; 28; 1000"
                        },
                        new
                        {
                            Id = 2,
                            Description = @"Вам нужно написать функцию для сложения двух чисел.
Например, входные данные: 2, 6Результат: 8",
                            InitialCode = @"using System;
                                public class Test
                                {
                                    static public void Main()
                                    {
                                        //ввод чисел
                                        int a = Convert.ToInt32(Console.ReadLine());
                                        int b = Convert.ToInt32(Console.ReadLine());
                                        //код

                                        Console.WriteLine(); //результат
                                    }
                                }",
                            Input = "2, 6; 4, 5; 4, 7; 100, 10",
                            LanguageId = 1,
                            Name = "Сложение чисел",
                            Output = "8; 9; 11; 110"
                        },
                        new
                        {
                            Id = 3,
                            Description = @"Вам нужно написать функцию для разности двух чисел.
Например, входные данные: 2, 6Результат: -4Функция должна выводить на консоль произведение чисел",
                            InitialCode = @"using System;
                                public class Test
                                {
                                    static public void Main()
                                    {
                                        //ввод чисел
                                        int a = Convert.ToInt32(Console.ReadLine());
                                        int b = Convert.ToInt32(Console.ReadLine());
                                        //код

                                        Console.WriteLine(); //результат
                                    }
                                }",
                            Input = "2, 6; 5, 4; 4, 7; 100, 10",
                            LanguageId = 1,
                            Name = "Разность чисел",
                            Output = "-4; 1; -3; 90"
                        },
                        new
                        {
                            Id = 4,
                            Description = @"Вам нужно написать функцию для деления двух чисел.
Например, входные данные: 6, 2Результат: 3Функция должна выводить на консоль произведение чисел",
                            InitialCode = @"using System;
                                public class Test
                                {
                                    static public void Main()
                                    {
                                        //ввод чисел
                                        int a = Convert.ToInt32(Console.ReadLine());
                                        int b = Convert.ToInt32(Console.ReadLine());
                                        //код

                                        Console.WriteLine(); //результат
                                    }
                                }",
                            Input = "6, 2; 8, 3; 4, 7; 100, -10",
                            LanguageId = 1,
                            Name = "Деление чисел",
                            Output = "3; 2; 0; -10"
                        },
                        new
                        {
                            Id = 5,
                            Description = @"Вам нужно написать функцию для нахождения остатка от двух чисел.
Например, входные данные: 4, 3Результат: 1Функция должна выводить на консоль произведение чисел",
                            InitialCode = @"using System;
                                public class Test
                                {
                                    static public void Main()
                                    {
                                        //ввод чисел
                                        int a = Convert.ToInt32(Console.ReadLine());
                                        int b = Convert.ToInt32(Console.ReadLine());
                                        //код

                                        Console.WriteLine(); //результат
                                    }
                                }",
                            Input = "4, 3; 4, 5; 12, 5; 100, 17",
                            LanguageId = 1,
                            Name = "Остаток чисел",
                            Output = "1; 4; 2; 15"
                        },
                        new
                        {
                            Id = 6,
                            Description = @"Вам нужно написать функцию для умножения двух чисел.
Например, входные данные: 2, 6Результат: 12",
                            InitialCode = @"#ввод
                                    a = int(input())
                                    b = int(input())
                                    #код

                                    print() #результат",
                            Input = "2, 6; 4, 5; 4, 7; 100, 10",
                            LanguageId = 2,
                            Name = "Умножение чисел",
                            Output = "12; 20; 28; 1000"
                        },
                        new
                        {
                            Id = 7,
                            Description = @"Вам нужно написать функцию для сложения двух чисел.
Например, входные данные: 2, 6Результат: 8",
                            InitialCode = @"#ввод
                                    a = int(input())
                                    b = int(input())
                                    #код

                                    print() #результат",
                            Input = "2, 6; 4, 5; 4, 7; 100, 10",
                            LanguageId = 2,
                            Name = "Сложение чисел",
                            Output = "8; 9; 11; 110"
                        },
                        new
                        {
                            Id = 8,
                            Description = @"Вам нужно написать функцию для разности двух чисел.
Например, входные данные: 2, 6Результат: -4Функция должна выводить на консоль произведение чисел",
                            InitialCode = @"#ввод
                                    a = int(input())
                                    b = int(input())
                                    #код

                                    print() #результат",
                            Input = "2, 6; 5, 4; 4, 7; 100, 10",
                            LanguageId = 2,
                            Name = "Разность чисел",
                            Output = "-4; 1; -3; 90"
                        },
                        new
                        {
                            Id = 9,
                            Description = @"Вам нужно написать функцию для деления двух чисел.
Например, входные данные: 6, 2Результат: 3Функция должна выводить на консоль произведение чисел",
                            InitialCode = @"#ввод
                                    a = int(input())
                                    b = int(input())
                                    #код

                                    print() #результат",
                            Input = "6, 2; 8, 3; 4, 7; 100, -10",
                            LanguageId = 2,
                            Name = "Деление чисел",
                            Output = "3; 2; 0; -10"
                        },
                        new
                        {
                            Id = 10,
                            Description = @"Вам нужно написать функцию для нахождения остатка от двух чисел.
Например, входные данные: 4, 3Результат: 1Функция должна выводить на консоль произведение чисел",
                            InitialCode = @"#ввод
                                    a = int(input())
                                    b = int(input())
                                    #код

                                    print() #результат",
                            Input = "4, 3; 4, 5; 12, 5; 100, 17",
                            LanguageId = 2,
                            Name = "Остаток чисел",
                            Output = "1; 4; 2; 15"
                        });
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Tasks.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CSharp"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Python3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Logs.Attempt", b =>
                {
                    b.HasOne("Compiler.Domain.Entities.Tasks.Kata", "Kata")
                        .WithMany()
                        .HasForeignKey("KataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compiler.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Logs.Logs", b =>
                {
                    b.HasOne("Compiler.Domain.Entities.Tasks.Kata", "Kata")
                        .WithMany()
                        .HasForeignKey("KataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compiler.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Compiler.Domain.Entities.Tasks.Kata", b =>
                {
                    b.HasOne("Compiler.Domain.Entities.Tasks.ProgrammingLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Compiler.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Compiler.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compiler.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Compiler.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
